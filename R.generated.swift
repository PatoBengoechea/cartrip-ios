//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 7 view controllers.
  struct segue {
    /// This struct is generated for `HomeViewController`, and contains static references to 5 segues.
    struct homeViewController {
      /// Segue identifier `goToActualTrip`.
      static let goToActualTrip: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, ActualRentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToActualTrip")
      /// Segue identifier `goToListCars`.
      static let goToListCars: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, ListCarsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToListCars")
      /// Segue identifier `goToProfile`.
      static let goToProfile: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, UserViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToProfile")
      /// Segue identifier `goToRent`.
      static let goToRent: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, RentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToRent")
      /// Segue identifier `goToSearchTrip`.
      static let goToSearchTrip: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, SearchCityViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToSearchTrip")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToActualTrip`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToActualTrip(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, ActualRentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.goToActualTrip, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToListCars`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToListCars(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, ListCarsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.goToListCars, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToProfile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToProfile(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, UserViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.goToProfile, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToRent`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToRent(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, RentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.goToRent, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToSearchTrip`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSearchTrip(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, SearchCityViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.goToSearchTrip, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ListCarsViewController`, and contains static references to 1 segues.
    struct listCarsViewController {
      /// Segue identifier `goToRentCar`.
      static let goToRentCar: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ListCarsViewController, RentViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToRentCar")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToRentCar`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToRentCar(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ListCarsViewController, RentViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.listCarsViewController.goToRentCar, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `PersonalDataRegisterViewController`, and contains static references to 1 segues.
    struct personalDataRegisterViewController {
      /// Segue identifier `goToAddLicense`.
      static let goToAddLicense: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PersonalDataRegisterViewController, LicenseViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToAddLicense")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToAddLicense`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToAddLicense(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PersonalDataRegisterViewController, LicenseViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.personalDataRegisterViewController.goToAddLicense, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `RegisterViewController`, and contains static references to 1 segues.
    struct registerViewController {
      /// Segue identifier `goToPersonalData`.
      static let goToPersonalData: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterViewController, PersonalDataRegisterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToPersonalData")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToPersonalData`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToPersonalData(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterViewController, PersonalDataRegisterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.goToPersonalData, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `RentViewController`, and contains static references to 1 segues.
    struct rentViewController {
      /// Segue identifier `goToPlaces`.
      static let goToPlaces: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RentViewController, PlaceViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToPlaces")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToPlaces`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToPlaces(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RentViewController, PlaceViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rentViewController.goToPlaces, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `RootViewController`, and contains static references to 1 segues.
    struct rootViewController {
      /// Segue identifier `goToSplash`.
      static let goToSplash: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, SplashViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToSplash")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToSplash`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToSplash(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, SplashViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.goToSplash, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SignInViewController`, and contains static references to 2 segues.
    struct signInViewController {
      /// Segue identifier `goToRegister`.
      static let goToRegister: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, RegisterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "goToRegister")
      /// Segue identifier `showHome`.
      static let showHome: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showHome")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `goToRegister`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func goToRegister(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, RegisterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.goToRegister, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `showHome`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHome(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.showHome, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `ListCars`.
    static let listCars = _R.storyboard.listCars()
    /// Storyboard `Rent`.
    static let rent = _R.storyboard.rent()
    /// Storyboard `Root`.
    static let root = _R.storyboard.root()
    /// Storyboard `SearchCity`.
    static let searchCity = _R.storyboard.searchCity()
    /// Storyboard `User`.
    static let user = _R.storyboard.user()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ListCars", bundle: ...)`
    static func listCars(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.listCars)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Rent", bundle: ...)`
    static func rent(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rent)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Root", bundle: ...)`
    static func root(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.root)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SearchCity", bundle: ...)`
    static func searchCity(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchCity)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "User", bundle: ...)`
    static func user(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.user)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 13 files.
  struct file {
    /// Resource file `14717-sedan-car-animation.json`.
    static let sedanCarAnimationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "14717-sedan-car-animation", pathExtension: "json")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `GothamRounded-Bold.otf`.
    static let gothamRoundedBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Bold", pathExtension: "otf")
    /// Resource file `GothamRounded-BoldItalic.otf`.
    static let gothamRoundedBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-BoldItalic", pathExtension: "otf")
    /// Resource file `GothamRounded-Book.otf`.
    static let gothamRoundedBookOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Book", pathExtension: "otf")
    /// Resource file `GothamRounded-BookItalic.otf`.
    static let gothamRoundedBookItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-BookItalic", pathExtension: "otf")
    /// Resource file `GothamRounded-Light.otf`.
    static let gothamRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Light", pathExtension: "otf")
    /// Resource file `GothamRounded-LightItalic.otf`.
    static let gothamRoundedLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-LightItalic", pathExtension: "otf")
    /// Resource file `GothamRounded-Medium.otf`.
    static let gothamRoundedMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRounded-Medium", pathExtension: "otf")
    /// Resource file `GothamRoundedBold_21016.ttf`.
    static let gothamRoundedBold_21016Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRoundedBold_21016", pathExtension: "ttf")
    /// Resource file `GothamRoundedBook_21018.ttf`.
    static let gothamRoundedBook_21018Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRoundedBook_21018", pathExtension: "ttf")
    /// Resource file `GothamRoundedLight_21020.ttf`.
    static let gothamRoundedLight_21020Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRoundedLight_21020", pathExtension: "ttf")
    /// Resource file `GothamRoundedMedium_21022.ttf`.
    static let gothamRoundedMedium_21022Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamRoundedMedium_21022", pathExtension: "ttf")

    /// `bundle.url(forResource: "14717-sedan-car-animation", withExtension: "json")`
    static func sedanCarAnimationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sedanCarAnimationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-Bold", withExtension: "otf")`
    static func gothamRoundedBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-BoldItalic", withExtension: "otf")`
    static func gothamRoundedBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-Book", withExtension: "otf")`
    static func gothamRoundedBookOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-BookItalic", withExtension: "otf")`
    static func gothamRoundedBookItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-Light", withExtension: "otf")`
    static func gothamRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-LightItalic", withExtension: "otf")`
    static func gothamRoundedLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRounded-Medium", withExtension: "otf")`
    static func gothamRoundedMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRoundedBold_21016", withExtension: "ttf")`
    static func gothamRoundedBold_21016Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBold_21016Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRoundedBook_21018", withExtension: "ttf")`
    static func gothamRoundedBook_21018Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBook_21018Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRoundedLight_21020", withExtension: "ttf")`
    static func gothamRoundedLight_21020Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLight_21020Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamRoundedMedium_21022", withExtension: "ttf")`
    static func gothamRoundedMedium_21022Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedMedium_21022Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 11 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamRounded-BoldItalic`.
    static let gothamRoundedBoldItalic = Rswift.FontResource(fontName: "GothamRounded-BoldItalic")
    /// Font `GothamRounded-BookItalic`.
    static let gothamRoundedBookItalic = Rswift.FontResource(fontName: "GothamRounded-BookItalic")
    /// Font `GothamRounded-LightItalic`.
    static let gothamRoundedLightItalic = Rswift.FontResource(fontName: "GothamRounded-LightItalic")

    /// `UIFont(name: "GothamRounded-BoldItalic", size: ...)`
    static func gothamRoundedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBoldItalic, size: size)
    }

    /// `UIFont(name: "GothamRounded-BookItalic", size: ...)`
    static func gothamRoundedBookItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBookItalic, size: size)
    }

    /// `UIFont(name: "GothamRounded-LightItalic", size: ...)`
    static func gothamRoundedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedLightItalic, size: size)
    }

    static func validate() throws {
      if R.font.gothamRoundedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-BoldItalic' could not be loaded, is 'GothamRounded-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedBookItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-BookItalic' could not be loaded, is 'GothamRounded-BookItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-LightItalic' could not be loaded, is 'GothamRounded-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `car-solid`.
    static let carSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "car-solid")
    /// Image `crosshairs-solid`.
    static let crosshairsSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "crosshairs-solid")
    /// Image `ellipsis-v-solid`.
    static let ellipsisVSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ellipsis-v-solid")
    /// Image `ford-mondeo-2019-delantera`.
    static let fordMondeo2019Delantera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ford-mondeo-2019-delantera")
    /// Image `freeLogo`.
    static let freeLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "freeLogo")
    /// Image `route-solid`.
    static let routeSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "route-solid")
    /// Image `user-solid`.
    static let userSolid = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-solid")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "car-solid", bundle: ..., traitCollection: ...)`
    static func carSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carSolid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "crosshairs-solid", bundle: ..., traitCollection: ...)`
    static func crosshairsSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.crosshairsSolid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ellipsis-v-solid", bundle: ..., traitCollection: ...)`
    static func ellipsisVSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipsisVSolid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ford-mondeo-2019-delantera", bundle: ..., traitCollection: ...)`
    static func fordMondeo2019Delantera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fordMondeo2019Delantera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "freeLogo", bundle: ..., traitCollection: ...)`
    static func freeLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.freeLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "route-solid", bundle: ..., traitCollection: ...)`
    static func routeSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.routeSolid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-solid", bundle: ..., traitCollection: ...)`
    static func userSolid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userSolid, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `Loader`.
    static let loader = _R.nib._Loader()
    /// Nib `ModalRentCar`.
    static let modalRentCar = _R.nib._ModalRentCar()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Loader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loader) instead")
    static func loader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ModalRentCar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.modalRentCar) instead")
    static func modalRentCar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.modalRentCar)
    }
    #endif

    static func loader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Loader? {
      return R.nib.loader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Loader
    }

    static func modalRentCar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.modalRentCar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 9 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DaysTableViewCell`.
    static let daysTableViewCell: Rswift.ReuseIdentifier<DaysTableViewCell> = Rswift.ReuseIdentifier(identifier: "DaysTableViewCell")
    /// Reuse identifier `ImageTableViewCell`.
    static let imageTableViewCell: Rswift.ReuseIdentifier<ImageTableViewCell> = Rswift.ReuseIdentifier(identifier: "ImageTableViewCell")
    /// Reuse identifier `InformationSharedTableViewCell`.
    static let informationSharedTableViewCell: Rswift.ReuseIdentifier<InformationSharedTableViewCell> = Rswift.ReuseIdentifier(identifier: "InformationSharedTableViewCell")
    /// Reuse identifier `ListCarTableViewCell`.
    static let listCarTableViewCell: Rswift.ReuseIdentifier<ListCarTableViewCell> = Rswift.ReuseIdentifier(identifier: "ListCarTableViewCell")
    /// Reuse identifier `LocationTableViewCell`.
    static let locationTableViewCell: Rswift.ReuseIdentifier<LocationTableViewCell> = Rswift.ReuseIdentifier(identifier: "LocationTableViewCell")
    /// Reuse identifier `PriceTableViewCell`.
    static let priceTableViewCell: Rswift.ReuseIdentifier<PriceTableViewCell> = Rswift.ReuseIdentifier(identifier: "PriceTableViewCell")
    /// Reuse identifier `ShareTableViewCell`.
    static let shareTableViewCell: Rswift.ReuseIdentifier<ShareTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShareTableViewCell")
    /// Reuse identifier `TripFromToTableViewCell`.
    static let tripFromToTableViewCell: Rswift.ReuseIdentifier<TripFromToTableViewCell> = Rswift.ReuseIdentifier(identifier: "TripFromToTableViewCell")
    /// Reuse identifier `TripTableViewCell`.
    static let tripTableViewCell: Rswift.ReuseIdentifier<TripTableViewCell> = Rswift.ReuseIdentifier(identifier: "TripTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 40 localization keys.
    struct localizable {
      /// en translation: Actual trip
      ///
      /// Locales: en, es-419
      static let actualTrip = Rswift.StringResource(key: "Actual trip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, es-419
      static let add = Rswift.StringResource(key: "Add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Add later
      ///
      /// Locales: en, es-419
      static let addLater = Rswift.StringResource(key: "Add later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Already have account?
      ///
      /// Locales: en, es-419
      static let alreadyHaveAccount = Rswift.StringResource(key: "Already have account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Birthdate
      ///
      /// Locales: en, es-419
      static let birthdate = Rswift.StringResource(key: "Birthdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es-419
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Car rent
      ///
      /// Locales: en, es-419
      static let carRent = Rswift.StringResource(key: "Car rent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, es-419
      static let close = Rswift.StringResource(key: "Close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: DNI
      ///
      /// Locales: en, es-419
      static let dnI = Rswift.StringResource(key: "DNI", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Dismiss
      ///
      /// Locales: en, es-419
      static let dismiss = Rswift.StringResource(key: "Dismiss", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Do you want other people join to your car?
      ///
      /// Locales: en, es-419
      static let doYouWantOtherPeopleJoinToYourCar = Rswift.StringResource(key: "Do you want other people join to your car?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es-419
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, es-419
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Enter a city and we will provide you the places to return the car
      ///
      /// Locales: en, es-419
      static let enterACityAndWeWillProvideYouThePlacesToReturnTheCar = Rswift.StringResource(key: "Enter a city and we will provide you the places to return the car", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Filter by destiny city
      ///
      /// Locales: en, es-419
      static let filterByDestinyCity = Rswift.StringResource(key: "Filter by destiny city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Finish registration
      ///
      /// Locales: en, es-419
      static let finishRegistration = Rswift.StringResource(key: "Finish registration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: From
      ///
      /// Locales: en, es-419
      static let from = Rswift.StringResource(key: "From", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: How many days do you need the car? (Max. 30)
      ///
      /// Locales: en, es-419
      static let howManyDaysDoYouNeedTheCar = Rswift.StringResource(key: "How many days do you need the car?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: In order to rent a car you need to upload your driver license. After that we are going to validate your license and then you will be able to use our cars
      ///
      /// Locales: en, es-419
      static let textToLicense = Rswift.StringResource(key: "Text to license", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Last name
      ///
      /// Locales: en, es-419
      static let lastName = Rswift.StringResource(key: "Last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Let's go to take a drive
      ///
      /// Locales: en, es-419
      static let letSGoToTakeADrive = Rswift.StringResource(key: "Let's go to take a drive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, es-419
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, es-419
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, es-419
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Please look for another city
      ///
      /// Locales: en, es-419
      static let pleaseLookForAnotherCity = Rswift.StringResource(key: "Please look for another city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Price per day
      ///
      /// Locales: en, es-419
      static let pricePerDay = Rswift.StringResource(key: "Price per day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en, es-419
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Registration success
      ///
      /// Locales: en, es-419
      static let registrationSuccess = Rswift.StringResource(key: "Registration success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Rent
      ///
      /// Locales: en, es-419
      static let rent = Rswift.StringResource(key: "Rent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Rent your car
      ///
      /// Locales: en, es-419
      static let rentYourCar = Rswift.StringResource(key: "Rent your car", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Sign in
      ///
      /// Locales: en, es-419
      static let signIn = Rswift.StringResource(key: "Sign in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en, es-419
      static let signUp = Rswift.StringResource(key: "Sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: The license was added
      ///
      /// Locales: en, es-419
      static let theLicenseWasAdded = Rswift.StringResource(key: "The license was added", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: There are no return points in that city
      ///
      /// Locales: en, es-419
      static let thereAreNoReturnPointsInThatCity = Rswift.StringResource(key: "There are no return points in that city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: To
      ///
      /// Locales: en, es-419
      static let to = Rswift.StringResource(key: "To", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Total price
      ///
      /// Locales: en, es-419
      static let totalPrice = Rswift.StringResource(key: "Total price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Wait until the licese is validated
      ///
      /// Locales: en, es-419
      static let waitUntilTheLiceseIsValidated = Rswift.StringResource(key: "Wait until the licese is validated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: Welcome
      ///
      /// Locales: en, es-419
      static let welcome = Rswift.StringResource(key: "Welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: You couldn't be registered
      ///
      /// Locales: en, es-419
      static let youCouldnTBeRegistered = Rswift.StringResource(key: "You couldn't be registered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)
      /// en translation: You must be grather than 18 years old to be registered
      ///
      /// Locales: en, es-419
      static let youMustBeGratherThan18YearsOldToBeRegistered = Rswift.StringResource(key: "You must be grather than 18 years old to be registered", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es-419"], comment: nil)

      /// en translation: Actual trip
      ///
      /// Locales: en, es-419
      static func actualTrip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Actual trip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Actual trip"
        }

        return NSLocalizedString("Actual trip", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, es-419
      static func add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add"
        }

        return NSLocalizedString("Add", bundle: bundle, comment: "")
      }

      /// en translation: Add later
      ///
      /// Locales: en, es-419
      static func addLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add later"
        }

        return NSLocalizedString("Add later", bundle: bundle, comment: "")
      }

      /// en translation: Already have account?
      ///
      /// Locales: en, es-419
      static func alreadyHaveAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already have account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already have account?"
        }

        return NSLocalizedString("Already have account?", bundle: bundle, comment: "")
      }

      /// en translation: Birthdate
      ///
      /// Locales: en, es-419
      static func birthdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Birthdate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Birthdate"
        }

        return NSLocalizedString("Birthdate", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es-419
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Car rent
      ///
      /// Locales: en, es-419
      static func carRent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Car rent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Car rent"
        }

        return NSLocalizedString("Car rent", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, es-419
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Close"
        }

        return NSLocalizedString("Close", bundle: bundle, comment: "")
      }

      /// en translation: DNI
      ///
      /// Locales: en, es-419
      static func dnI(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DNI", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DNI"
        }

        return NSLocalizedString("DNI", bundle: bundle, comment: "")
      }

      /// en translation: Dismiss
      ///
      /// Locales: en, es-419
      static func dismiss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dismiss", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dismiss"
        }

        return NSLocalizedString("Dismiss", bundle: bundle, comment: "")
      }

      /// en translation: Do you want other people join to your car?
      ///
      /// Locales: en, es-419
      static func doYouWantOtherPeopleJoinToYourCar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Do you want other people join to your car?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Do you want other people join to your car?"
        }

        return NSLocalizedString("Do you want other people join to your car?", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es-419
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, es-419
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: Enter a city and we will provide you the places to return the car
      ///
      /// Locales: en, es-419
      static func enterACityAndWeWillProvideYouThePlacesToReturnTheCar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter a city and we will provide you the places to return the car", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter a city and we will provide you the places to return the car"
        }

        return NSLocalizedString("Enter a city and we will provide you the places to return the car", bundle: bundle, comment: "")
      }

      /// en translation: Filter by destiny city
      ///
      /// Locales: en, es-419
      static func filterByDestinyCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter by destiny city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter by destiny city"
        }

        return NSLocalizedString("Filter by destiny city", bundle: bundle, comment: "")
      }

      /// en translation: Finish registration
      ///
      /// Locales: en, es-419
      static func finishRegistration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Finish registration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Finish registration"
        }

        return NSLocalizedString("Finish registration", bundle: bundle, comment: "")
      }

      /// en translation: From
      ///
      /// Locales: en, es-419
      static func from(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("From", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "From"
        }

        return NSLocalizedString("From", bundle: bundle, comment: "")
      }

      /// en translation: How many days do you need the car? (Max. 30)
      ///
      /// Locales: en, es-419
      static func howManyDaysDoYouNeedTheCar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How many days do you need the car?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How many days do you need the car?"
        }

        return NSLocalizedString("How many days do you need the car?", bundle: bundle, comment: "")
      }

      /// en translation: In order to rent a car you need to upload your driver license. After that we are going to validate your license and then you will be able to use our cars
      ///
      /// Locales: en, es-419
      static func textToLicense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Text to license", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Text to license"
        }

        return NSLocalizedString("Text to license", bundle: bundle, comment: "")
      }

      /// en translation: Last name
      ///
      /// Locales: en, es-419
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last name"
        }

        return NSLocalizedString("Last name", bundle: bundle, comment: "")
      }

      /// en translation: Let's go to take a drive
      ///
      /// Locales: en, es-419
      static func letSGoToTakeADrive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Let's go to take a drive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Let's go to take a drive"
        }

        return NSLocalizedString("Let's go to take a drive", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, es-419
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, es-419
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Next"
        }

        return NSLocalizedString("Next", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, es-419
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: Please look for another city
      ///
      /// Locales: en, es-419
      static func pleaseLookForAnotherCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please look for another city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please look for another city"
        }

        return NSLocalizedString("Please look for another city", bundle: bundle, comment: "")
      }

      /// en translation: Price per day
      ///
      /// Locales: en, es-419
      static func pricePerDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Price per day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Price per day"
        }

        return NSLocalizedString("Price per day", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en, es-419
      static func profile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile"
        }

        return NSLocalizedString("Profile", bundle: bundle, comment: "")
      }

      /// en translation: Registration success
      ///
      /// Locales: en, es-419
      static func registrationSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Registration success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Registration success"
        }

        return NSLocalizedString("Registration success", bundle: bundle, comment: "")
      }

      /// en translation: Rent
      ///
      /// Locales: en, es-419
      static func rent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rent"
        }

        return NSLocalizedString("Rent", bundle: bundle, comment: "")
      }

      /// en translation: Rent your car
      ///
      /// Locales: en, es-419
      static func rentYourCar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rent your car", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rent your car"
        }

        return NSLocalizedString("Rent your car", bundle: bundle, comment: "")
      }

      /// en translation: Sign in
      ///
      /// Locales: en, es-419
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign in"
        }

        return NSLocalizedString("Sign in", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en, es-419
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign up"
        }

        return NSLocalizedString("Sign up", bundle: bundle, comment: "")
      }

      /// en translation: The license was added
      ///
      /// Locales: en, es-419
      static func theLicenseWasAdded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The license was added", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The license was added"
        }

        return NSLocalizedString("The license was added", bundle: bundle, comment: "")
      }

      /// en translation: There are no return points in that city
      ///
      /// Locales: en, es-419
      static func thereAreNoReturnPointsInThatCity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There are no return points in that city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There are no return points in that city"
        }

        return NSLocalizedString("There are no return points in that city", bundle: bundle, comment: "")
      }

      /// en translation: To
      ///
      /// Locales: en, es-419
      static func to(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To"
        }

        return NSLocalizedString("To", bundle: bundle, comment: "")
      }

      /// en translation: Total price
      ///
      /// Locales: en, es-419
      static func totalPrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total price"
        }

        return NSLocalizedString("Total price", bundle: bundle, comment: "")
      }

      /// en translation: Wait until the licese is validated
      ///
      /// Locales: en, es-419
      static func waitUntilTheLiceseIsValidated(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wait until the licese is validated", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wait until the licese is validated"
        }

        return NSLocalizedString("Wait until the licese is validated", bundle: bundle, comment: "")
      }

      /// en translation: Welcome
      ///
      /// Locales: en, es-419
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome"
        }

        return NSLocalizedString("Welcome", bundle: bundle, comment: "")
      }

      /// en translation: You couldn't be registered
      ///
      /// Locales: en, es-419
      static func youCouldnTBeRegistered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You couldn't be registered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You couldn't be registered"
        }

        return NSLocalizedString("You couldn't be registered", bundle: bundle, comment: "")
      }

      /// en translation: You must be grather than 18 years old to be registered
      ///
      /// Locales: en, es-419
      static func youMustBeGratherThan18YearsOldToBeRegistered(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You must be grather than 18 years old to be registered", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You must be grather than 18 years old to be registered"
        }

        return NSLocalizedString("You must be grather than 18 years old to be registered", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ModalRentCar.validate()
    }

    struct _Loader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Loader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Loader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Loader
      }

      fileprivate init() {}
    }

    struct _ModalRentCar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ModalRentCar"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ford-mondeo-2019-delantera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ford-mondeo-2019-delantera' is used in nib 'ModalRentCar', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try listCars.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try rent.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try root.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try searchCity.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try user.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AuthNavigationController

      let bundle = R.hostingBundle
      let name = "Auth"

      static func validate() throws {
        if UIKit.UIImage(named: "freeLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'freeLogo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Home"

      static func validate() throws {
        if UIKit.UIImage(named: "car-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'car-solid' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "crosshairs-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'crosshairs-solid' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ellipsis-v-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ellipsis-v-solid' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "route-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'route-solid' is used in storyboard 'Home', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user-solid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user-solid' is used in storyboard 'Home', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "freeLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'freeLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct listCars: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ListCarsViewController

      let bundle = R.hostingBundle
      let name = "ListCars"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct rent: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RentViewController

      let bundle = R.hostingBundle
      let name = "Rent"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct root: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Root"

      static func validate() throws {
        if UIKit.UIImage(named: "freeLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'freeLogo' is used in storyboard 'Root', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct searchCity: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchCityViewController

      let bundle = R.hostingBundle
      let name = "SearchCity"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct user: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UserViewController

      let bundle = R.hostingBundle
      let name = "User"

      static func validate() throws {
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'User', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
